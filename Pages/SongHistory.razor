@page "/history"
@using SpotifyHistory.Data
@using SpotifyHistory.Helpers
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ProtectedSessionStorage BrowserStorage
@inject NavigationManager NavManager

<PageTitle>Songs</PageTitle>

<p>@authCode</p>
<p>@value</p>
<p>@history</p>
<p>@e</p>

<button class="btn btn-primary" @onclick="UpdateHistory">Update</button>

@code {
    string? authCode = "";
    string? access = "";
    string? value;
    string? refresh = "";
    string? Auth = "false";
    string? history = "";
    string e = "";
    History songHistory = new History();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetAuth();
        if (firstRender)
        {
            authCode = NavManager.QueryString("code");
            if (authCode == null || authCode == "")
            {
                NavManager.NavigateTo("/", true);
            }
            else
            {
                if (Auth == "true" && firstRender)
                {
                    await NotAuthenticated();
                    NavManager.NavigateTo("/", true);
                }
                SpotifyAuth.getTokens(authCode);
                await BrowserStorage.SetAsync("AuthCode", authCode);
                e = SpotifyAuth.getError();
                await Authenticated();
                await SetToken();
                await Task.Delay(1200);
                if (access != null && refresh != null)
                {
                    await songHistory.GetHistoryAsync(access, refresh);
                }
            }
        }
    }

    private async Task SetToken()
    {
        await Task.Delay(1000);
        access = SpotifyAuth.getAccessToken();
        await songHistory.setUsername(access);
        refresh = SpotifyAuth.getRefreshToken();
        await BrowserStorage.SetAsync("accessToken", access);
        await BrowserStorage.SetAsync("refreshToken", refresh);
        await BrowserStorage.SetAsync("DateTime", DateTime.Now.ToString());
    }

    private async Task Authenticated()
    {
        await BrowserStorage.SetAsync("Auth", "true");
    }

    private async Task NotAuthenticated()
    {
        await BrowserStorage.SetAsync("Auth", "false");
    }

    private async Task GetAuth()
    {
        var a = await BrowserStorage.GetAsync<string>("Auth");
        Auth = a.Value;
    }

    public void UpdateHistory()
    {
        history = songHistory.GetSongHistory();
    }

}

