@page "/history"
@using SpotifyHistory.Data
@using SpotifyHistory.Helpers
@using SpotifySongHistory.Data
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ProtectedSessionStorage BrowserStorage
@inject NavigationManager NavManager

<PageTitle>Songs</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <RadzenText style="flex-grow: 1; justify-content: center; text-align: center; color: #1db954; align-content: center" TextAlign="TextAlign.Center" TextStyle="TextStyle.DisplayH6">Song History</RadzenText>
            <button @onclick="Logout" style="align-content: end; border-color: #ffffff; color: #1db954" class="btn btn-outline-success btn-sm">Logout</button>
        </div>
        <div class="content px-4">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                <RadzenTextBox Placeholder="Track, Artist, Album ... " @bind-Value=@search class="w-100" Style="max-width: 35%;" />
                <RadzenButton Icon="search" Click=@(args => getSearchQuery()) ButtonStyle="ButtonStyle.Success" Style="color: #1db954;" Variant="Variant.Outlined" />
                <div style="position: relative;">
                    <button class="btn btn-primary" data-toggle="collapse" @onclick="ToggleFilterMenu" aria-expanded="false" aria-controls="collapseExample" style="position: relative; background-color: #1db954 !important; border-color: #ffffff !important;">
                        Filters
                    </button>

                    <div class="@FilterCSS" style="position: absolute; z-index: 30; height: fit-content; width: 400px" id="collapseExample">
                        <div class="card card-block" style="padding: 10px;">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="10px" Style="overflow-y: auto; max-height: 200px;">
                                <button class="btn btn-link">Reset</button>
                                    Options...
                                    <RadzenCheckBoxList @bind-Value=@checkBoxes TValue="int" Orientation=Orientation.Horizontal Gap="10px" class="mb-5">
                                        <Items>
                                            <RadzenCheckBoxListItem Text="Track" Value="1" Style="padding: 5px"/>
                                            <RadzenCheckBoxListItem Text="Artist" Value="2" Style="padding: 5px"/>
                                            <RadzenCheckBoxListItem Text="Album" Value="3" Style="padding: 5px"/>
                                        </Items>
                                    </RadzenCheckBoxList>
                                    Date and Time
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
                                        <RadzenDatePicker @bind-Value=@startDate DateFormat="MM/dd/yyyy" Style="min-width: 40%; max-width: 50%;" />
                                        _
                                        <RadzenDatePicker @bind-Value=@endDate DateFormat="MM/dd/yyyy" Style="min-width: 40%; max-width=50%;" />
                                    </RadzenStack>
                               @* <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                                    Length

                                </RadzenStack> *@
                            </RadzenStack>
                        </div>
                    </div>
                </div>


                <RadzenDropDown TValue="string" Value=@currentOrder Data=@order Change="@(args => currentOrder = $"{args}")" />

                <button class="btn btn-success" style="background-color: #1db954 !important; position: relative; border-color: #ffffff !important;" data-toggle="collapse" @onclick="ApplyFilters" aria-expanded="false" aria-controls="collapseExample">
                    Apply
                </button>
            </RadzenStack>

            <div style="margin-top: 15px; position: relative;">
                <RadzenDataGrid @ref="songsGrid" TItem="Song" AllowSorting="true" AllowVirtualization="true" Data="@listOfSongs" Style="height: 700px; overflow: auto;">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No songs to display.</p>
                    </EmptyTemplate>
                    <Columns>
                        <RadzenDataGridColumn Width="50px" TItem="Song" Title="No." Sortable="false" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                @(listOfSongs.IndexOf(data) + 1)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Song" Title="Track" Property="track" Sortable="false" />
                        <RadzenDataGridColumn TItem="Song" Title="Artists" Property="artists" Sortable="false">
                            <Template Context="song">
                                @artistToString(song)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Song" Title="Album" Property="album" Sortable="false" />
                        <RadzenDataGridColumn TItem="Song" Title="Date" Property="played_at">
                            <Template Context="song">
                                @convertToDate(song.played_at)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Song" Title="Length" Property="length">
                            <Template Context="song">
                                @convertToTime(song.length)
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </main>
</div>

@code {
    string? search = "";
    string username = "";
    string? authCode = "";
    string? access = "";
    string? refresh = "";
    string? Auth = "false";

    Filter filter = new Filter(); //All filters
    IEnumerable<int> checkBoxes = new int[] { 1, 2, 3 };
    IEnumerable<string> order = new string[] { "Oldest", "Latest", "Longest", "Shortest" };
    string currentOrder = "Oldest";
    List<int> ranger = new List<int>(new int[] { 0, 600 });
    DateTime startDate = DateTime.UnixEpoch;
    DateTime endDate = DateTime.Now;

    List<Song> listOfSongs;
    RadzenDataGrid<Song> songsGrid;
    History songHistory = new History();
    Searching searching = new Searching();
    bool filterCollapse = true;
    private string? FilterCSS => filterCollapse ? "collapse" : null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetAuth();
        if (firstRender)
        {
            authCode = NavManager.QueryString("code");
            if (authCode == null || authCode == "")
            {
                NavManager.NavigateTo("/", true);
            }
            else
            {
                if (Auth == "true" && firstRender)
                {
                    await NotAuthenticated();
                    NavManager.NavigateTo("/", true);
                }
                SpotifyAuth.getTokens(authCode);
                await BrowserStorage.SetAsync("AuthCode", authCode);
                await Authenticated();
                await SetToken();
                await Task.Delay(1200);
                if (access != null && refresh != null)
                {
                    await songHistory.GetHistoryAsync(access, refresh);
                }
            }
        }
    }

    private async Task SetToken()
    {
        await Task.Delay(1000);
        access = SpotifyAuth.getAccessToken();
        await songHistory.setUsername(access);
        refresh = SpotifyAuth.getRefreshToken();
        await BrowserStorage.SetAsync("accessToken", access);
        await BrowserStorage.SetAsync("refreshToken", refresh);
        await BrowserStorage.SetAsync("DateTime", DateTime.Now.ToString());
    }

    private async Task Authenticated()
    {
        await BrowserStorage.SetAsync("Auth", "true");
    }

    private async Task NotAuthenticated()
    {
        await BrowserStorage.SetAsync("Auth", "false");
    }

    private async Task GetAuth()
    {
        var a = await BrowserStorage.GetAsync<string>("Auth");
        Auth = a.Value;
    }

    private void getSearchQuery()
    {
        listOfSongs = searching.Search(search, songHistory.getUsername(), filter, currentOrder);
    }

    private string convertToTime(int time)
    {
        return "" + time / 60 + ":" + time % 60;
    }

    private string convertToDate(double date)
    {
        TimeSpan timeSpan = TimeSpan.FromMilliseconds(date);
        DateTime dateTime = new DateTime(1970, 1, 1) + timeSpan;
        return dateTime.ToLocalTime().ToShortDateString() + " " + dateTime.ToLocalTime().ToShortTimeString();
    }

    private void ApplyFilters()
    {
        filter.Track = checkBoxes.Contains<int>(1);
        filter.Artists = checkBoxes.Contains<int>(2);
        filter.Album = checkBoxes.Contains<int>(3);
        if (startDate != default(DateTime))
        {
            filter.DateAndTime = (startDate, filter.DateAndTime.end);
        }
        if (endDate != default(DateTime))
        {
            filter.DateAndTime = (filter.DateAndTime.start, endDate.AddHours(23));
        }
        filter.Length = (ranger[0], ranger[1]);
        getSearchQuery();
    }

    private void ClearFilters()
    {
        filter.Track = true;
        filter.Artists = true;
        filter.Album = true;
        checkBoxes = new int[] { 1, 2, 3 };
        filter.DateAndTime = (DateTime.UnixEpoch, DateTime.Now);
        startDate = DateTime.UnixEpoch;
        endDate = DateTime.Now;
        filter.Length = (0, 600);
        ranger[0] = 0;
        ranger[1] = 600;
        currentOrder = "Oldest";
        getSearchQuery();
    }

    private void Logout()
    {
        BrowserStorage.DeleteAsync("accessToken");
        BrowserStorage.DeleteAsync("Auth");
        BrowserStorage.DeleteAsync("refreshToken");
        BrowserStorage.DeleteAsync("DateTime");
        BrowserStorage.DeleteAsync("AuthCode");
        NavManager.NavigateTo("/", true);
    }

    private string artistToString(Song song)
    {
        string result = "";
        foreach (string artist in song.artists)
        {
            result += artist + ", ";
        }
        return result.Substring(0, result.Length - 2);
    }

    private void ToggleFilterMenu()
    {
        filterCollapse = !filterCollapse;
    }
}

